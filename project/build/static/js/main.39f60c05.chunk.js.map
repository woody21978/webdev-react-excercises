{"version":3,"sources":["App.js","Admin.js","serviceWorker.js","index.js"],"names":["Article","state","visible","updateVisible","bind","this","setState","author","props","data","text","bigtext","className","href","onClick","React","Component","News","template","length","map","item","index","key","App","newsAll","fetch","method","then","response","json","news","console","log","getData","url","a","Admin","inputAuthor","inputText","authorIsEmpty","textIsEmpty","updateAuthorValue","updateTextValue","BtnClick","e","target","value","trim","preventDefault","headers","Accept","mode","body","JSON","stringify","res","ok","status","statusText","catch","type","onChange","disabled","statetextIsEmpty","Boolean","window","location","hostname","match","ReactDOM","render","exact","path","component","to","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.39f60c05.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport PropTypes from 'prop-types';\n\n// let news = require('./data.json');\n/* ========== ВАРИАНТ 1 ========== */\n// let news;\n// async function getNewsAsync(name) \n// {\n//   let response = await fetch(`http://localhost:80/${name}`);\n//   let data = await response.json()\n//   return data;\n// }\n// getNewsAsync('read')\n//   .then((data) => {\n//     let news = data;\n//   });\n/* ========== ВАРИАНТ 2 ========== */\n// async function getNewsData() {\n//   let news;\n//   try {\n//     await fetch('http://localhost:80/read', {\n//       method: 'POST'\n//     })\n//       .then((res) => {\n//         return res.json();\n//       })\n//       .then((data) => {\n//         news = data;\n//         return news;\n//       });\n//   } catch (err) {\n//     console.error(err);\n//   }\n// }\n/* ========== ВАРИАНТ 3 ========== */\n// fetch('http://localhost:80/read', {\n//   method: 'post'\n// })\n//   .then((response) => {\n//     return response.json();\n//   })\n//   .then((data) => {\n//     // console.log(data);\n//     news = data;\n//     console.log(news);\n//   });\n// let news = [];\nclass Article extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      visible: false\n    };\n    this.updateVisible = this.updateVisible.bind(this);\n  }\n  updateVisible() {\n    this.setState({ visible: true });\n  }\n  render() {\n    let author = this.props.data.author;\n    let text = this.props.data.text;\n    let bigtext = this.props.data.bigtext;\n    let visible = this.state.visible;\n    return (\n      <div className=\"article\">\n        <p className=\"card__author\">{author}</p>\n        <p className=\"card__text\">{text}</p>\n        <a href=\"#\" className={\"card__readmore \" + (visible ? 'none' : '')} onClick={this.updateVisible}>Подробнее</a>\n        <p className={\"card__big-text \" + (visible ? '' : 'none')}>{bigtext}</p>\n      </div>\n    )\n  }\n}\n\nclass News extends React.Component {\n  render() {\n    let data = this.props.data;\n    let template;\n\n    if (data.length > 0) {\n      template = data.map(function (item, index) {\n        return (\n          <div key={index} className=\"card\">\n            <Article data={item} />\n          </div>\n        );\n      })\n    } else {\n      template = <p>Новостей нет :(</p>\n    }\n\n    return (\n      <div className=\"cards\">\n        {template}\n        <p className={data.length > 0 ? '' : 'none'}>Количество новостей: {data.length}</p>\n      </div>\n    );\n  }\n}\n\nNews.propTypes = {\n  data: PropTypes.array.isRequired\n}\nArticle.propTypes = {\n  data: PropTypes.shape({\n    author: PropTypes.string.isRequired,\n    text: PropTypes.string.isRequired,\n    bigtext: PropTypes.string.isRequired\n  })\n}\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      newsAll: []\n    };\n  }\n  componentDidMount() {\n    fetch('http://localhost:80/read', {\n      method: 'post'\n    })\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        // console.log(data);\n        var news;\n        news = data;\n        this.setState({ newsAll: news });\n        console.log(news);\n      });\n  }\n  render() {\n    return (\n      <div className=\"container\" >\n        <h1 className=\"title\">Новости</h1>\n        <News data={this.state.newsAll} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport './App.css';\r\n\r\nconst getData = async function (url) {\r\n  const response = await fetch(url);\r\n\r\n  // if (!response.ok) {\r\n  //   throw new Error(`Ошибка по адресу ${url}, статус ошибки ${response.status}`);\r\n  // }\r\n  console.log(await response.json());\r\n  return await response.json();\r\n}\r\n\r\n\r\nclass Admin extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      inputAuthor: '',\r\n      inputText: '',\r\n      authorIsEmpty: true,\r\n      textIsEmpty: true\r\n    };\r\n    this.updateAuthorValue = this.updateAuthorValue.bind(this);\r\n    this.updateTextValue = this.updateTextValue.bind(this);\r\n    this.BtnClick = this.BtnClick.bind(this);\r\n  }\r\n  updateAuthorValue(e) {\r\n    this.setState({\r\n      inputAuthor: e.target.value\r\n    })\r\n    if (e.target.value.trim().length > 0) {\r\n      this.setState({\r\n        authorIsEmpty: false\r\n      })\r\n    } else {\r\n      this.setState({\r\n        authorIsEmpty: true\r\n      })\r\n    }\r\n  }\r\n  updateTextValue(e) {\r\n    this.setState({\r\n      inputText: e.target.value\r\n    })\r\n    if (e.target.value.trim().length > 0) {\r\n      this.setState({\r\n        textIsEmpty: false\r\n      })\r\n    } else {\r\n      this.setState({\r\n        textIsEmpty: true\r\n      })\r\n    }\r\n  }\r\n  BtnClick(e) {\r\n    e.preventDefault();\r\n    const author = this.state.inputAuthor;\r\n    const text = this.state.inputText;\r\n    const data = {\r\n      author: author,\r\n      text: text\r\n    };\r\n    getData('http://localhost:80/test.js').then(function (data) {\r\n      console.log(data);\r\n    });\r\n    fetch('http://localhost:80/add-news', {\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      method: 'post',\r\n      mode: 'no-cors',\r\n      body: JSON.stringify(data)\r\n    })\r\n      .then(function (res) {\r\n        if (res.ok) {\r\n          console.log('ok');\r\n        } else {\r\n          console.log('Ответ сервера ' + res.status + ': ' + res.statusText);\r\n        }\r\n      })\r\n      .catch(function (res) {\r\n        console.log(res);\r\n      });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <form className=\"add\">\r\n          <label>Автор:</label>\r\n          <input type=\"text\" className=\"add__author\" value={this.state.inputAuthor} onChange={this.updateAuthorValue} />\r\n          <label>Новость:</label>\r\n          <textarea className=\"add__text\" value={this.state.inputText} onChange={this.updateTextValue} ></textarea>\r\n          <button className=\"add__btn\" onClick={this.BtnClick} disabled={this.state.authorIsEmpty || this.statetextIsEmpty}>Опубликовать</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Admin;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Admin from './Admin';\nimport { Switch, Route, BrowserRouter, Redirect } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(\n//   <App />,\n//   document.getElementById('root')\n//   );\n// ReactDOM.render((\n//   <BrowserRouter>\n//     <App />\n//   </BrowserRouter>\n// ), document.getElementById('root'))\nReactDOM.render((\n  <BrowserRouter>\n    <Switch>\n      <Route exact path='/' component={App}/>\n      <Route exact path='/admin' component={Admin}/>\n      <Redirect to=\"/\" />\n    </Switch>\n  </BrowserRouter>\n), document.getElementById('root'))\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}