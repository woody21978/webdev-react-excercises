{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["WeatherWidget","weather","this","props","type","city","deg","style","transform","dir","wind","wet","className","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gOA8CeA,G,6KAvCX,IACMC,EAAU,iBADHC,KAAKC,MAAMC,KAElBC,EAAOH,KAAKC,MAAME,KAClBC,EAAMJ,KAAKC,MAAMG,IAEjBC,EAAQ,CACZC,UAAW,UAFDN,KAAKC,MAAMM,IAEQ,QAEzBC,EAAOR,KAAKC,MAAMO,KAClBC,EAAMT,KAAKC,MAAMQ,IACvB,OACM,yBAAKC,UAAU,QACb,yBAAKA,UAAU,cAAcP,GAC7B,yBAAKO,UAAU,eACf,yBAAKA,UAAU,WACb,yBAAKA,UAAWX,IAChB,0BAAMW,UAAU,oBAAoBN,IAEtC,yBAAKM,UAAU,aACb,yBAAKA,UAAU,uBACb,mGACA,yBAAKA,UAAU,6BAAwBL,MAAOA,KAEhD,uBAAGK,UAAU,cAAb,mCAAkCF,EAAlC,aACA,uBAAGE,UAAU,aAAb,2DAAqCD,EAArC,W,GA1BcE,IAAMC,YCOdC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,yBAAKT,UAAU,aACb,yBAAKA,UAAU,SACb,kBAAC,IAAMU,WAAP,KACE,kBAAC,EAAD,CACEjB,KAAM,cACNC,IAAK,GACLG,IAAK,IACLC,KAAM,EACNC,IAAK,GACLP,KAAM,UAER,kBAAC,EAAD,CACEC,KAAM,WACNC,IAAK,GACLG,IAAK,IACLC,KAAM,EACNC,IAAK,GACLP,KAAM,WAER,kBAAC,EAAD,CACEC,KAAM,0DACNC,IAAK,GACLG,IAAK,IACLC,KAAM,EACNC,IAAK,GACLP,KAAM,aAKdmB,SAASC,eAAe,SD8FpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.33808203.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './App.css';\n\n\nclass WeatherWidget extends React.Component {\n  render() {\n    const type = this.props.type;\n    const weather = 'weather__icon ' + type;\n    const city = this.props.city;\n    const deg = this.props.deg;\n    const dir = this.props.dir;\n    const style = {\n      transform: 'rotate(' + dir + 'deg)'\n    };\n    const wind = this.props.wind;\n    const wet = this.props.wet;\n    return (\n          <div className=\"card\">\n            <div className=\"card__city\">{city}</div>\n            <div className=\"card__line\"></div>\n            <div className=\"weather\">\n              <div className={weather}></div>\n              <span className=\"weather__degrees\">{deg}</span>\n            </div>\n            <div className=\"card-text\">\n              <div className=\"сard-direction\">\n                <p>Напрваление: </p>\n                <div className=\"сard-direction__arrow\" style={style}></div>\n              </div>\n              <p className=\"card__wind\">Ветер: {wind} м/c</p>\n              <p className=\"card__wet\">Влажность: {wet}%</p>\n            </div>\n          </div>\n    );\n  }\n}\nWeatherWidget.propTypes = {\n  type: PropTypes.string.isRequired,\n  city: PropTypes.string.isRequired,\n  dir: PropTypes.number.isRequired,\n  deg: PropTypes.number.isRequired,\n  wind: PropTypes.number.isRequired,\n  wet: PropTypes.number.isRequired\n}\n\nexport default WeatherWidget;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <div className=\"container\">\n    <div className=\"cards\">\n      <React.StrictMode>\n        <App\n          city={'Los-Angeles'}\n          deg={17}\n          dir={230}\n          wind={2}\n          wet={80}\n          type={'sunny'}\n        />\n        <App\n          city={'New York'}\n          deg={12}\n          dir={300}\n          wind={4}\n          wet={50}\n          type={'cloudy'}\n        />\n        <App\n          city={'Йошкар-Ола'}\n          deg={12}\n          dir={390}\n          wind={3}\n          wet={90}\n          type={'water'}\n        />\n      </React.StrictMode>\n    </div>\n  </div>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}